/*
 * generated by Xtext
 */
package com.github.thomasfischl.minipascal.ui.quickfix;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.ui.editor.model.edit.IModificationContext;
import org.eclipse.xtext.ui.editor.model.edit.ISemanticModification;
import org.eclipse.xtext.ui.editor.quickfix.Fix;
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor;
import org.eclipse.xtext.validation.Issue;

import com.github.thomasfischl.minipascal.pascal.Fact;
import com.github.thomasfischl.minipascal.pascal.Stat;
import com.github.thomasfischl.minipascal.pascal.VarName;
import com.github.thomasfischl.minipascal.pascal.impl.ModelImpl;
import com.github.thomasfischl.minipascal.pascal.impl.PascalFactoryImpl;
import com.github.thomasfischl.minipascal.util.ModelUtil;
import com.github.thomasfischl.minipascal.validation.PascalJavaValidator;

/**
 * Custom quickfixes.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#quickfixes
 */
public class PascalQuickfixProvider extends org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider {

  @Fix(PascalJavaValidator.UNDECLARED_VARIABLE)
  public void fixUndeclaredVariable(final Issue issue, IssueResolutionAcceptor acceptor) {
    String msg = String.format("Declare a new variable '%s'.", issue.getData()[0]);
    acceptor.accept(issue, "Add Declaration", msg, "upcase.png", new ISemanticModification() {
      @Override
      public void apply(EObject element, IModificationContext context) {
        System.out.println(element);

        String name = null;
        if (element instanceof Fact) {
          name = ((Fact) element).getVar();
        } else if (element instanceof Stat) {
          Stat stat = (Stat) element;
          if (stat.getLeftside() != null) {
            name = stat.getLeftside();
          } else if (stat.getRead() != null) {
            name = stat.getRead();
          }
        }

        if (name != null) {
          ModelImpl modelImpl = ModelUtil.getModelImpl(element);
          VarName varName = PascalFactoryImpl.eINSTANCE.createVarName();
          varName.setName(name);
          modelImpl.getVardecls().getVars().add(varName);
        } else {
          throw new IllegalArgumentException("The fact element is not a variable usage.");
        }
      }
    });
  }

}
